'use strict';

module.exports = {
  handleListChange: function handleListChange(data, context, counterName) {
    if (data.after.exists() && data.before.exists()) {
      return null;
    }

    var collectionRef = data.after.ref.parent;
    var countRef = collectionRef.parent.child(counterName);

    // Return the promise from countRef.transaction() so our function
    // waits for this async event to complete before it exits.
    return countRef.transaction(function (current) {
      if (data.after.exists()) {
        return (current || 0) + 1;
      } else {
        return (current || 0) - 1;
      }
    });
  },
  handleRecount: function handleRecount(data, context, listName) {
    var correction = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;

    if (!data.exists()) {
      var counterRef = data.ref;
      var collectionRef = counterRef.parent.child(listName);

      // Return the promise from counterRef.set() so our function
      // waits for this async event to complete before it exits.
      return collectionRef.once('value').then(function (messagesData) {
        return counterRef.set(messagesData.numChildren() + correction);
      });
    }
    return null;
  }
};