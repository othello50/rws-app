'use strict';

exports.__esModule = true;
exports.removeClaim = exports.setClaim = undefined;

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _firebaseAdmin = require('firebase-admin');

var _firebaseAdmin2 = _interopRequireDefault(_firebaseAdmin);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

var setClaim = function () {
  var _ref = _asyncToGenerator( /*#__PURE__*/_regenerator2.default.mark(function _callee(uid, name) {
    var _extends2;

    var value = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;

    var user, _ref2, claimName, rest;

    return _regenerator2.default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return _firebaseAdmin2.default.auth().getUser(uid);

          case 2:
            user = _context.sent;
            _ref2 = user.customClaims || {}, claimName = _ref2[name], rest = _objectWithoutProperties(_ref2, [name]);
            _context.next = 6;
            return _firebaseAdmin2.default.auth().setCustomUserClaims(uid, _extends({}, rest, (_extends2 = {}, _extends2[name] = value, _extends2)));

          case 6:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, undefined);
  }));

  return function setClaim(_x, _x2) {
    return _ref.apply(this, arguments);
  };
}();

var removeClaim = function () {
  var _ref3 = _asyncToGenerator( /*#__PURE__*/_regenerator2.default.mark(function _callee2(uid, name) {
    var user, _ref4, claimName, rest;

    return _regenerator2.default.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            _context2.next = 2;
            return _firebaseAdmin2.default.auth().getUser(uid);

          case 2:
            user = _context2.sent;
            _ref4 = user.customClaims || {}, claimName = _ref4[name], rest = _objectWithoutProperties(_ref4, [name]);
            _context2.next = 6;
            return _firebaseAdmin2.default.auth().setCustomUserClaims(uid, _extends({}, rest));

          case 6:
          case 'end':
            return _context2.stop();
        }
      }
    }, _callee2, undefined);
  }));

  return function removeClaim(_x4, _x5) {
    return _ref3.apply(this, arguments);
  };
}();

exports.setClaim = setClaim;
exports.removeClaim = removeClaim;