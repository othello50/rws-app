'use strict';

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

var functions = require('firebase-functions');
var admin = require('firebase-admin');
var mkdirp = require('mkdirp-promise');
var spawn = require('child-process-promise').spawn;
var path = require('path');
var os = require('os');
var fs = require('fs');

var THUMB_MAX_HEIGHT = 200;
var THUMB_MAX_WIDTH = 200;
var THUMB_PREFIX = 'thumb_';

module.exports = function () {
  var _ref = _asyncToGenerator( /*#__PURE__*/_regenerator2.default.mark(function _callee(object) {
    var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    var _config$maxHeight, maxHeight, _config$maxWidth, maxWidth, _config$thumbPrefix, thumbPrefix, _config$cacheControl, cacheControl, filePath, contentType, fileDir, fileName, thumbFilePath, tempLocalFile, tempLocalDir, tempLocalThumbFile, bucket, file, thumbFile, metadata, downloadURL;

    return _regenerator2.default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _config$maxHeight = config.maxHeight, maxHeight = _config$maxHeight === undefined ? THUMB_MAX_HEIGHT : _config$maxHeight, _config$maxWidth = config.maxWidth, maxWidth = _config$maxWidth === undefined ? THUMB_MAX_WIDTH : _config$maxWidth, _config$thumbPrefix = config.thumbPrefix, thumbPrefix = _config$thumbPrefix === undefined ? THUMB_PREFIX : _config$thumbPrefix, _config$cacheControl = config.cacheControl, cacheControl = _config$cacheControl === undefined ? 'public,max-age=216000' : _config$cacheControl;
            filePath = object.name;
            contentType = object.contentType; // This is the image MIME type

            fileDir = path.dirname(filePath);
            fileName = path.basename(filePath);
            thumbFilePath = path.normalize(path.join(fileDir, '' + thumbPrefix + fileName));
            tempLocalFile = path.join(os.tmpdir(), filePath);
            tempLocalDir = path.dirname(tempLocalFile);
            tempLocalThumbFile = path.join(os.tmpdir(), thumbFilePath);

            if (!fileName.startsWith(thumbPrefix)) {
              _context.next = 12;
              break;
            }

            console.log('Already a Thumbnail.');
            return _context.abrupt('return', false);

          case 12:
            bucket = admin.storage().bucket(object.bucket);
            file = bucket.file(filePath);
            thumbFile = bucket.file(thumbFilePath);
            metadata = {
              contentType: contentType,
              'Cache-Control': cacheControl
            };
            _context.next = 18;
            return mkdirp(tempLocalDir);

          case 18:
            _context.next = 20;
            return file.download({
              destination: tempLocalFile
            });

          case 20:
            _context.next = 22;
            return spawn('convert', [tempLocalFile, '-thumbnail', maxWidth + 'x' + maxHeight + '>', tempLocalThumbFile], { capture: ['stdout', 'stderr'] });

          case 22:
            console.log('Thumbnail created at', tempLocalThumbFile);

            _context.next = 25;
            return bucket.upload(tempLocalThumbFile, {
              destination: thumbFilePath,
              predefinedAcl: 'publicRead',
              metadata: metadata
            });

          case 25:
            console.log('Thumbnail uploaded to Storage at', thumbFilePath);

            fs.unlinkSync(tempLocalFile);
            fs.unlinkSync(tempLocalThumbFile);

            downloadURL = 'https://storage.googleapis.com/' + object.bucket.replace(/\//g, '%2F') + '/' + thumbFilePath;
            return _context.abrupt('return', { file: thumbFile, downloadURL: downloadURL, fileDir: fileDir, fileName: fileName });

          case 30:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, undefined);
  }));

  return function (_x) {
    return _ref.apply(this, arguments);
  };
}();